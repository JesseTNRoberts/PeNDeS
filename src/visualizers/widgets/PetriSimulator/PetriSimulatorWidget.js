/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Nov 11 2020 19:19:31 GMT+0100 (Central European Standard Time).
 */

define(['ejs',
    'jquery',
    'd3',
    'css!./styles/PetriSimulatorWidget.css'
], function (ejs) {
    'use strict';

    var WIDGET_CLASS = 'petri-simulator';

    function PetriSimulatorWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
        this._simEl = null;


        this._logger.debug('ctor finished');
    }

    PetriSimulatorWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;
        // set widget class
        this._el.addClass(WIDGET_CLASS);
        // Create indication header
        this._headerEl = $('<h3>');
        this._simulationEl = $('<h6>', {id: 'simulation-disp'})
            .append('<span>Simulator Messages-> Hover over any element to see the name.</span>');

        this._interpretationEl = $('<h6>', {id: 'interpretation-disp'})
            .append('<span>Interpreter Messages-> Run the interpreter to classify this PetriNet...</span>');

        this._el.append(this._headerEl);
        this._el.append(this._simulationEl);
        this._el.append(this._interpretationEl);
        this._headerEl.css('color', 'red');

    };

    PetriSimulatorWidget.prototype._interpreterDisplay = function (message){
        d3.select("#interpretation-disp").text('Interpreter Messages-> ' + message);
    }

    PetriSimulatorWidget.prototype._simulatorDisplay = function (message){
        d3.select("#simulation-disp").text('Simulator Messages-> ' + message);
    }

    PetriSimulatorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    PetriSimulatorWidget.prototype._embedSimulator = function (petriData) {
        var self = this;
        if (this._simEl === null) {
            if (typeof petriData.simulatorHtmlTemplate !== 'string') {
                self._headerEl.text('No simulator is attached.');
                return;
            }

            let renderedHtml = ejs.render(petriData.simulatorHtmlTemplate, petriData);
            self._logger.info(renderedHtml);

            this._simEl = $('<iframe>', {
                id: 'PetrinetSimulator',
                src: 'data:text/html;charset=utf-8,' +
                    encodeURIComponent(renderedHtml),
                width: '100%',
                height: '100%',
                frameBorder: "0",
                overflow: 'hidden',
                scrolling: 'no'
            });
            this._el.append(this._simEl);
        }
    };

    PetriSimulatorWidget.prototype._simulatorUnload = function(){
        d3.select("#PetrinetSimulator").remove();
        this._simEl = null;
    };

    PetriSimulatorWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        //this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    PetriSimulatorWidget.prototype.addNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        //this._el.append('<div>Adding node "' + desc.name + '"</div>');
    };

    PetriSimulatorWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            //this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    PetriSimulatorWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    PetriSimulatorWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriSimulatorWidget.prototype.destroy = function () {
    };

    PetriSimulatorWidget.prototype.onActivate = function () {
        this._logger.debug('PetriSimulatorWidget has been activated');
    };

    PetriSimulatorWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriSimulatorWidget has been deactivated');
    };

    return PetriSimulatorWidget;
});
